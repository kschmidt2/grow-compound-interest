let subhead=document.getElementsByClassName("chart-subhead"),headline=document.getElementById("chart-head");if(!headline)for(var i=0;i<subhead.length;i++)subhead[i].style.fontWeight="600";Highcharts.setOptions({lang:{thousandsSep:","}});let chartId=document.getElementById("chart-container");function drawHighcharts(){Highcharts.chart(chartId,{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100},title:{text:null},data:{googleSpreadsheetKey:"1X5CqibtwzBH7JH7Klgqkl-BOBWj8mZHwXWfuBB88E2Y",startColumn:5,endColumn:7},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow",format:"{value:.2f}"},tickAmount:7,max:1.5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,formatter:function(){return"$"+(1e6*this.y).toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:0})}},annotations:[{labels:[{point:{xAxis:0,yAxis:0,x:1,y:1.2},text:"Starts at 25",useHTML:!0,backgroundColor:"white",align:"left"},{point:{xAxis:0,yAxis:0,x:1,y:1},text:"$1,300,000",useHTML:!0,backgroundColor:"white",align:"left",className:"annotation-big-green"},{point:{xAxis:0,yAxis:0,x:1,y:.85},text:"Starts at 35",useHTML:!0,backgroundColor:"white",align:"left"},{point:{xAxis:0,yAxis:0,x:1,y:.65},text:"$565,000",useHTML:!0,backgroundColor:"white",align:"left",className:"annotation-big-gray"}]}],responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartId.innerHTML){let e=document.getElementsByClassName("chart-area");for(var t=0;t<e.length;t++)e[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
